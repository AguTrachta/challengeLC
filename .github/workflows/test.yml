
name: Testing and Code Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Cache Conan Packages (Optional)
      - name: Cache Conan Packages
        uses: actions/cache@v3
        with:
          path: ~/.conan/data
          key: ${{ runner.os }}-conan-${{ hashFiles('process_manager/conanfile.txt') }}
          restore-keys: |
            ${{ runner.os }}-conan-

      # 3. Install Conan (If needed, can be skipped if reused from build)
      - name: Install Conan
        run: |
          python -m pip install --upgrade pip
          pip install conan

      # 4. Download the Build Artifacts from Build Job
      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: build-output
          path: process_manager/build

      # 5. Run Tests (using the already-built binaries)
      - name: Run Tests
        run: |
          cd process_manager/build
          ctest --output-on-failure

      # 6. Install gcovr for Coverage Reporting
      - name: Install gcovr
        run: |
          sudo apt-get update
          sudo apt-get install -y gcovr

      # 7. Generate Code Coverage Report
      - name: Generate Code Coverage Report
        run: |
          cd process_manager/build
          gcovr -r ../process_manager --xml-pretty -o coverage.xml
          gcovr -r ../process_manager --html-details -o coverage.html

      # 8. Upload Coverage Reports as Artifacts
      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v3
        with:
          name: CoverageReports
          path: |
            process_manager/build/coverage.xml
            process_manager/build/coverage.html
