
name: Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Cache Conan Packages
      - name: Cache Conan Packages
        uses: actions/cache@v3
        with:
          path: ~/.conan/data
          key: ${{ runner.os }}-conan-${{ hashFiles('challengeLC/process_manager/conanfile.txt') }}
          restore-keys: |
            ${{ runner.os }}-conan-

      # 3. Install Conan
      - name: Install Conan
        run: |
          python -m pip install --upgrade pip
          pip install conan

      # 4. Set up Environment and Install Dependencies with Conan
      - name: Install Dependencies with Conan
        run: |
          # Set up virtual environment
          python -m venv myenv
          source myenv/bin/activate

          # Install dependencies using Conan
          cd challengeLC/process_manager
          mkdir -p build
          cd build
          conan install .. --build=missing

          # Deactivate virtual environment
          deactivate

      # 5. Cache CMake Build Directory
      - name: Cache CMake Build Directory
        uses: actions/cache@v3
        with:
          path: build/
          key: ${{ runner.os }}-cmake-${{ hashFiles('challengeLC/process_manager/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-cmake-

      # 6. Build Project using CMake
      - name: Build Project
        run: |
          cd challengeLC/process_manager/build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release

      # 7. Upload Build Artifact
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: challengeLC/process_manager/build/
